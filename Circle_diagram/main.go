package main

import (
	"database/sql"
	"encoding/json"
	"fmt"
	"log"
	"math"
	"math/rand"
	"net/http"
	"strings"
	"time"

	_ "github.com/mattn/go-sqlite3"
)

type Circle struct {
	X      int    `json:"x"`
	Y      int    `json:"y"`
	Radius int    `json:"radius"`
	Type   string `json:"type"`
}

type Config struct {
	Width    int `json:"width"`
	Height   int `json:"height"`
	Spawns   int `json:"spawn_count"`
	Bedrooms int `json:"bedroom_count"`
	SpawnR   int `json:"spawn_radius"`
	BedroomR int `json:"bedroom_radius"`
	MaxGap   int `json:"max_gap"`
}

type Map struct {
	ID      int       `json:"id"`
	Name    string    `json:"name"`
	Config  Config    `json:"config"`
	Circles []Circle  `json:"circles"`
	Speeds  []float64 `json:"speeds,omitempty"`
	Epoch   int       `json:"epoch"`
	Created time.Time `json:"created_at"`
}

type Cell struct {
	X    int   `json:"x"`
	Y    int   `json:"y"`
	Vals []int `json:"indices"`
}

type SetSpeedsRequest struct {
	MapID  int       `json:"map_id"`
	Speeds []float64 `json:"speeds"`
}

type NewEpochRequest struct {
	MapID int `json:"map_id"`
}

var db *sql.DB

func forceMigration() error {
	log.Println("üîß –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –º–∏–≥—Ä–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∫–æ–ª–æ–Ω–æ–∫ –∏ –¥–æ–±–∞–≤–ª—è–µ–º –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
	migrations := []struct {
		sql  string
		desc string
	}{
		{"ALTER TABLE maps ADD COLUMN speeds TEXT DEFAULT '';", "speeds"},
		{"ALTER TABLE maps ADD COLUMN epoch INTEGER DEFAULT 0;", "epoch"},
	}

	for i, migration := range migrations {
		_, err := db.Exec(migration.sql)
		if err != nil {
			if strings.Contains(err.Error(), "duplicate column") {
				log.Printf("   ‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è %d (%s): –∫–æ–ª–æ–Ω–∫–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç", i+1, migration.desc)
			} else {
				log.Printf("   ‚ö†Ô∏è  –ú–∏–≥—Ä–∞—Ü–∏—è %d (%s): %v", i+1, migration.desc, err)
			}
		} else {
			log.Printf("   ‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è %d (%s): –∫–æ–ª–æ–Ω–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞", i+1, migration.desc)
		}
	}

	// –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É–¥–∞–ª—è–µ–º –∏ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É map_cells
	log.Println("üîß –ü–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã map_cells...")
	_, err := db.Exec("DROP TABLE IF EXISTS map_cells;")
	if err != nil {
		log.Printf("   ‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ä—É—é —Ç–∞–±–ª–∏—Ü—É: %v", err)
	}

	// –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –∫–ª–µ—Ç–æ–∫ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–æ–º
	cellsTable := `CREATE TABLE map_cells (
		id INTEGER PRIMARY KEY AUTOINCREMENT,
		map_id INTEGER NOT NULL,
		x INTEGER NOT NULL,
		y INTEGER NOT NULL,
		cell_values TEXT NOT NULL,
		FOREIGN KEY(map_id) REFERENCES maps(id)
	);`

	_, err = db.Exec(cellsTable)
	if err != nil {
		log.Printf("   ‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã map_cells: %v", err)
		return err
	} else {
		log.Printf("   ‚úÖ –¢–∞–±–ª–∏—Ü–∞ map_cells —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
	}

	log.Println("üéâ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
	return nil
}

func initDB() error {
	var err error
	db, err = sql.Open("sqlite3", "./maps.db")
	if err != nil {
		return err
	}

	// –°–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é —Ç–∞–±–ª–∏—Ü—É
	createTableSQL := `
	CREATE TABLE IF NOT EXISTS maps (
		id INTEGER PRIMARY KEY AUTOINCREMENT,
		name TEXT NOT NULL,
		config TEXT NOT NULL,
		circles TEXT NOT NULL,
		created_at DATETIME DEFAULT CURRENT_TIMESTAMP
	);`

	_, err = db.Exec(createTableSQL)
	if err != nil {
		return err
	}

	// –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –º–∏–≥—Ä–∞—Ü–∏—è
	err = forceMigration()
	if err != nil {
		return err
	}

	return nil
}

type MapGenerator struct {
	config   Config
	spawns   []Circle
	bedrooms []Circle
}

func NewMapGenerator(cfg Config) *MapGenerator {
	return &MapGenerator{
		config:   cfg,
		spawns:   []Circle{},
		bedrooms: []Circle{},
	}
}

func (g *MapGenerator) getAllCircles() []Circle {
	all := []Circle{}
	for _, c := range g.spawns {
		c.Type = "spawn"
		all = append(all, c)
	}
	for _, c := range g.bedrooms {
		c.Type = "bedroom"
		all = append(all, c)
	}
	return all
}

func (g *MapGenerator) canPlaceCircle(newCircle Circle) bool {
	if newCircle.X-newCircle.Radius < 0 || newCircle.X+newCircle.Radius >= g.config.Width ||
		newCircle.Y-newCircle.Radius < 0 || newCircle.Y+newCircle.Radius >= g.config.Height {
		return false
	}
	for _, existing := range g.getAllCircles() {
		distance := math.Sqrt(float64((newCircle.X-existing.X)*(newCircle.X-existing.X) +
			(newCircle.Y-existing.Y)*(newCircle.Y-existing.Y)))
		if distance < float64(newCircle.Radius+existing.Radius) {
			return false
		}
	}
	return true
}

func (g *MapGenerator) generateNearbyPosition(baseCircle Circle, radius int) (int, int) {
	for attempts := 0; attempts < 30; attempts++ {
		angle := rand.Float64() * 2 * math.Pi
		minDistance := float64(baseCircle.Radius + radius)
		maxDistance := minDistance + float64(g.config.MaxGap)
		distance := minDistance + rand.Float64()*(maxDistance-minDistance)

		x := int(float64(baseCircle.X) + distance*math.Cos(angle))
		y := int(float64(baseCircle.Y) + distance*math.Sin(angle))

		if x >= radius && x < g.config.Width-radius && y >= radius && y < g.config.Height-radius {
			return x, y
		}
	}
	x := radius + rand.Intn(g.config.Width-2*radius)
	y := radius + rand.Intn(g.config.Height-2*radius)
	return x, y
}

func (g *MapGenerator) Generate() error {
	rand.Seed(time.Now().UnixNano())

	if g.config.Spawns > 0 {
		center := Circle{
			X:      g.config.Width / 2,
			Y:      g.config.Height / 2,
			Radius: g.config.SpawnR,
		}
		if g.canPlaceCircle(center) {
			g.spawns = append(g.spawns, center)
		}
	}

	for i := len(g.spawns); i < g.config.Spawns; i++ {
		placed := false
		for attempts := 0; attempts < 3000; attempts++ {
			var x, y int
			existing := g.getAllCircles()
			if len(existing) > 0 {
				base := existing[rand.Intn(len(existing))]
				x, y = g.generateNearbyPosition(base, g.config.SpawnR)
			} else {
				x = g.config.SpawnR + rand.Intn(g.config.Width-2*g.config.SpawnR)
				y = g.config.SpawnR + rand.Intn(g.config.Height-2*g.config.SpawnR)
			}
			newCircle := Circle{X: x, Y: y, Radius: g.config.SpawnR}
			if g.canPlaceCircle(newCircle) {
				g.spawns = append(g.spawns, newCircle)
				placed = true
				break
			}
		}
		if !placed {
			return fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å spawn %d", i+1)
		}
	}

	for i := 0; i < g.config.Bedrooms; i++ {
		placed := false
		for attempts := 0; attempts < 3000; attempts++ {
			var x, y int
			existing := g.getAllCircles()
			if len(existing) > 0 {
				base := existing[rand.Intn(len(existing))]
				x, y = g.generateNearbyPosition(base, g.config.BedroomR)
			} else {
				x = g.config.BedroomR + rand.Intn(g.config.Width-2*g.config.BedroomR)
				y = g.config.BedroomR + rand.Intn(g.config.Height-2*g.config.BedroomR)
			}
			newCircle := Circle{X: x, Y: y, Radius: g.config.BedroomR}
			if g.canPlaceCircle(newCircle) {
				g.bedrooms = append(g.bedrooms, newCircle)
				placed = true
				break
			}
		}
		if !placed {
			return fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å bedroom %d", i+1)
		}
	}
	return nil
}

func getCellType(x, y int, circles []Circle) int {
	for _, circle := range circles {
		dx := x - circle.X
		dy := y - circle.Y

		if dx == 0 && dy == 0 {
			return 2 // –∑–µ–ª–µ–Ω–∞—è (—Ü–µ–Ω—Ç—Ä –∫—Ä—É–≥–∞)
		}
		if dx*dx+dy*dy <= circle.Radius*circle.Radius {
			return 1 // —Å–∏–Ω—è—è (–≤–Ω—É—Ç—Ä–∏ –∫—Ä—É–≥–∞)
		}
	}
	return 0 // –±–µ–ª–∞—è (–≤–Ω–µ –∫—Ä—É–≥–æ–≤)
}

func createProbabilitySelector(probabilities []float64) []int {
	selector := []int{}
	for idx, p := range probabilities {
		count := int(p * 50)
		for i := 0; i < count; i++ {
			selector = append(selector, idx)
		}
	}
	return selector
}

func generateDistribution(cfg Config, circles []Circle, probabilities []float64) []Cell {
	cells := []Cell{}
	selector := createProbabilitySelector(probabilities)
	if len(selector) == 0 {
		return cells
	}

	for y := 0; y < cfg.Height; y++ {
		for x := 0; x < cfg.Width; x++ {
			cellType := getCellType(x, y, circles)
			var vals []int
			switch cellType {
			case 2: // –∑–µ–ª–µ–Ω–∞—è - 0 —á–∏—Å–µ–ª
				continue
			case 1: // —Å–∏–Ω—è—è - 1 —á–∏—Å–ª–æ
				vals = []int{selector[rand.Intn(len(selector))]}
			case 0: // –±–µ–ª–∞—è - 1-2 —á–∏—Å–ª–∞
				count := 1 + rand.Intn(2)
				vals = make([]int, count)
				for i := 0; i < count; i++ {
					vals[i] = selector[rand.Intn(len(selector))]
				}
			}
			if len(vals) > 0 {
				cells = append(cells, Cell{X: x, Y: y, Vals: vals})
			}
		}
	}
	return cells
}

func getNeighbors(x, y int, cfg Config) []struct{ X, Y int } {
	directions := []struct{ dx, dy int }{
		{-1, -1},
		{-1, 0},
		{-1, 1},
		{0, -1},
		{0, 1},
		{1, -1},
		{1, 0},
		{1, 1},
	}
	neighbors := []struct{ X, Y int }{}
	for _, d := range directions {
		nx, ny := x+d.dx, y+d.dy
		if nx >= 0 && nx < cfg.Width && ny >= 0 && ny < cfg.Height {
			neighbors = append(neighbors, struct{ X, Y int }{nx, ny})
		}
	}
	return neighbors
}

func moveNumbers(cfg Config, circles []Circle, cells []Cell, speeds []float64) []Cell {
	if len(speeds) == 0 {
		log.Println("‚ö†Ô∏è  –°–∫–æ—Ä–æ—Å—Ç–∏ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã, —á–∏—Å–ª–∞ –Ω–µ –¥–≤–∏–≥–∞—é—Ç—Å—è")
		return cells
	}

	rand.Seed(time.Now().UnixNano())

	// –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç—É —Ç–µ–∫—É—â–∏—Ö –ø–æ–∑–∏—Ü–∏–π
	state := make(map[string][]int)
	for _, cell := range cells {
		key := fmt.Sprintf("%d,%d", cell.X, cell.Y)
		state[key] = append([]int{}, cell.Vals...)
	}

	// –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∫–∞—Ä—Ç—É –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
	newState := make(map[string][]int)

	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–æ–≤—É—é –∫–∞—Ä—Ç—É –ø—É—Å—Ç—ã–º–∏ —Å–ª–∞–π—Å–∞–º–∏
	for y := 0; y < cfg.Height; y++ {
		for x := 0; x < cfg.Width; x++ {
			key := fmt.Sprintf("%d,%d", x, y)
			newState[key] = []int{}
		}
	}

	// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é –∫–ª–µ—Ç–∫—É
	for _, cell := range cells {
		for _, val := range cell.Vals {
			speedIdx := val
			if speedIdx >= len(speeds) {
				speedIdx = 0
			}

			speed := speeds[speedIdx]
			if rand.Float64()*100 < speed {
				// –ü—ã—Ç–∞–µ–º—Å—è –ø–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å —á–∏—Å–ª–æ
				moved := false
				neighbors := getNeighbors(cell.X, cell.Y, cfg)

				// –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º —Å–æ—Å–µ–¥–µ–π –¥–ª—è —Å–ª—É—á–∞–π–Ω–æ—Å—Ç–∏
				for i := len(neighbors) - 1; i > 0; i-- {
					j := rand.Intn(i + 1)
					neighbors[i], neighbors[j] = neighbors[j], neighbors[i]
				}

				for _, neigh := range neighbors {
					neighborKey := fmt.Sprintf("%d,%d", neigh.X, neigh.Y)
					neighborType := getCellType(neigh.X, neigh.Y, circles)
					currentCount := len(newState[neighborKey])

					canMove := false
					switch neighborType {
					case 0: // –±–µ–ª–∞—è - –º–∞–∫—Å–∏–º—É–º 2
						canMove = currentCount < 2
					case 1: // —Å–∏–Ω—è—è - –º–∞–∫—Å–∏–º—É–º 1
						canMove = currentCount < 1
					case 2: // –∑–µ–ª–µ–Ω–∞—è - –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞
						canMove = false
					}

					if canMove {
						newState[neighborKey] = append(newState[neighborKey], val)
						moved = true
						break
					}
				}

				if !moved {
					// –ß–∏—Å–ª–æ –æ—Å—Ç–∞–µ—Ç—Å—è –Ω–∞ –ø—Ä–µ–∂–Ω–µ–º –º–µ—Å—Ç–µ
					cellKey := fmt.Sprintf("%d,%d", cell.X, cell.Y)
					newState[cellKey] = append(newState[cellKey], val)
				}
			} else {
				// –ß–∏—Å–ª–æ –æ—Å—Ç–∞–µ—Ç—Å—è –Ω–∞ –ø—Ä–µ–∂–Ω–µ–º –º–µ—Å—Ç–µ
				cellKey := fmt.Sprintf("%d,%d", cell.X, cell.Y)
				newState[cellKey] = append(newState[cellKey], val)
			}
		}
	}

	// –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –æ–±—Ä–∞—Ç–Ω–æ –≤ Cell slice
	result := []Cell{}
	for y := 0; y < cfg.Height; y++ {
		for x := 0; x < cfg.Width; x++ {
			key := fmt.Sprintf("%d,%d", x, y)
			if vals := newState[key]; len(vals) > 0 {
				result = append(result, Cell{X: x, Y: y, Vals: vals})
			}
		}
	}
	return result
}

// –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ï –§–£–ù–ö–¶–ò–ò –î–õ–Ø –†–ê–ë–û–¢–´ –° –ë–î
func saveCellsToDB(mapID int, cells []Cell) error {
	tx, err := db.Begin()
	if err != nil {
		return fmt.Errorf("–Ω–∞—á–∞–ª–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: %v", err)
	}
	defer tx.Rollback()

	// –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ
	_, err = tx.Exec("DELETE FROM map_cells WHERE map_id = ?", mapID)
	if err != nil {
		return fmt.Errorf("—É–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä—ã—Ö –∫–ª–µ—Ç–æ–∫: %v", err)
	}

	// –ò–°–ü–†–ê–í–õ–ï–ù–û: –∏—Å–ø–æ–ª—å–∑—É–µ–º cell_values –≤–º–µ—Å—Ç–æ values
	stmt, err := tx.Prepare("INSERT INTO map_cells (map_id, x, y, cell_values) VALUES (?, ?, ?, ?)")
	if err != nil {
		return fmt.Errorf("–ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: %v", err)
	}
	defer stmt.Close()

	for _, cell := range cells {
		if len(cell.Vals) > 0 {
			valsJSON, _ := json.Marshal(cell.Vals)
			_, err = stmt.Exec(mapID, cell.X, cell.Y, string(valsJSON))
			if err != nil {
				return fmt.Errorf("–≤—Å—Ç–∞–≤–∫–∞ –∫–ª–µ—Ç–∫–∏ (%d,%d): %v", cell.X, cell.Y, err)
			}
		}
	}

	err = tx.Commit()
	if err != nil {
		return fmt.Errorf("–∫–æ–º–º–∏—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: %v", err)
	}

	return nil
}

func loadCellsFromDB(mapID int) ([]Cell, error) {
	// –ò–°–ü–†–ê–í–õ–ï–ù–û: –∏—Å–ø–æ–ª—å–∑—É–µ–º cell_values –∏ –¥–æ–±–∞–≤–ª–µ–Ω–æ WHERE —É—Å–ª–æ–≤–∏–µ
	rows, err := db.Query("SELECT x, y, cell_values FROM map_cells WHERE map_id = ?", mapID)
	if err != nil {
		return nil, fmt.Errorf("–∑–∞–ø—Ä–æ—Å –∫–ª–µ—Ç–æ–∫: %v", err)
	}
	defer rows.Close()

	cells := []Cell{}
	for rows.Next() {
		var x, y int
		var valsJSON string
		err = rows.Scan(&x, &y, &valsJSON)
		if err != nil {
			return nil, fmt.Errorf("—á—Ç–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏: %v", err)
		}

		var vals []int
		err = json.Unmarshal([]byte(valsJSON), &vals)
		if err != nil {
			return nil, fmt.Errorf("–ø–∞—Ä—Å–∏–Ω–≥ values: %v", err)
		}

		cells = append(cells, Cell{X: x, Y: y, Vals: vals})
	}

	return cells, nil
}

// –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
func validateSpeeds(speeds []float64) error {
	if len(speeds) == 0 {
		return fmt.Errorf("–º–∞—Å—Å–∏–≤ —Å–∫–æ—Ä–æ—Å—Ç–µ–π –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
	}
	for i, speed := range speeds {
		if speed < 0 || speed > 100 {
			return fmt.Errorf("—Å–∫–æ—Ä–æ—Å—Ç—å [%d] –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç 0 –¥–æ 100, –ø–æ–ª—É—á–µ–Ω–æ: %f", i, speed)
		}
	}
	return nil
}

func validateConfig(cfg Config) error {
	if cfg.Width <= 0 || cfg.Height <= 0 {
		return fmt.Errorf("—Ä–∞–∑–º–µ—Ä—ã –∫–∞—Ä—Ç—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º–∏")
	}
	if cfg.Width > 100 || cfg.Height > 100 {
		return fmt.Errorf("—Ä–∞–∑–º–µ—Ä—ã –∫–∞—Ä—Ç—ã —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∏–µ (max 100x100)")
	}
	if cfg.Spawns < 0 || cfg.Bedrooms < 0 {
		return fmt.Errorf("–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ spawn/bedroom –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º")
	}
	return nil
}

// HTTP Handlers

func createMapHandler(w http.ResponseWriter, r *http.Request) {
	if r.Method != http.MethodPost {
		http.Error(w, "–ú–µ—Ç–æ–¥ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è", http.StatusMethodNotAllowed)
		return
	}

	var req struct {
		Name   string `json:"name"`
		Config Config `json:"config"`
	}

	if err := json.NewDecoder(r.Body).Decode(&req); err != nil {
		http.Error(w, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π JSON: "+err.Error(), http.StatusBadRequest)
		return
	}

	if err := validateConfig(req.Config); err != nil {
		http.Error(w, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: "+err.Error(), http.StatusBadRequest)
		return
	}

	if req.Name == "" {
		req.Name = fmt.Sprintf("map_%d", time.Now().Unix())
	}

	gen := NewMapGenerator(req.Config)
	if err := gen.Generate(); err != nil {
		http.Error(w, "–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: "+err.Error(), http.StatusBadRequest)
		return
	}

	circles := gen.getAllCircles()
	configBytes, _ := json.Marshal(req.Config)
	circlesBytes, _ := json.Marshal(circles)

	res, err := db.Exec("INSERT INTO maps (name, config, circles) VALUES (?, ?, ?)",
		req.Name, string(configBytes), string(circlesBytes))
	if err != nil {
		http.Error(w, "–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î: "+err.Error(), http.StatusInternalServerError)
		return
	}

	id, _ := res.LastInsertId()
	resp := Map{
		ID:      int(id),
		Name:    req.Name,
		Config:  req.Config,
		Circles: circles,
		Epoch:   0,
		Created: time.Now(),
	}

	w.Header().Set("Content-Type", "application/json")
	json.NewEncoder(w).Encode(resp)
}

func distributeHandler(w http.ResponseWriter, r *http.Request) {
	if r.Method != http.MethodPost {
		http.Error(w, "–ú–µ—Ç–æ–¥ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è", http.StatusMethodNotAllowed)
		return
	}

	var req struct {
		MapID         int       `json:"map_id"`
		Probabilities []float64 `json:"probabilities"`
	}

	if err := json.NewDecoder(r.Body).Decode(&req); err != nil {
		http.Error(w, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π JSON: "+err.Error(), http.StatusBadRequest)
		return
	}

	var configStr, circlesStr string
	err := db.QueryRow("SELECT config, circles FROM maps WHERE id = ?", req.MapID).
		Scan(&configStr, &circlesStr)
	if err != nil {
		if err == sql.ErrNoRows {
			http.Error(w, "–ö–∞—Ä—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", http.StatusNotFound)
		} else {
			http.Error(w, "–û—à–∏–±–∫–∞ –ë–î: "+err.Error(), http.StatusInternalServerError)
		}
		return
	}

	var cfg Config
	var circles []Circle
	if err := json.Unmarshal([]byte(configStr), &cfg); err != nil {
		http.Error(w, "–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ config: "+err.Error(), http.StatusInternalServerError)
		return
	}
	if err := json.Unmarshal([]byte(circlesStr), &circles); err != nil {
		http.Error(w, "–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ circles: "+err.Error(), http.StatusInternalServerError)
		return
	}

	cells := generateDistribution(cfg, circles, req.Probabilities)

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–ª–µ—Ç–∫–∏ –≤ –ë–î
	if err := saveCellsToDB(req.MapID, cells); err != nil {
		http.Error(w, "–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–ª–µ—Ç–æ–∫: "+err.Error(), http.StatusInternalServerError)
		return
	}

	resp := struct {
		MapID int    `json:"map_id"`
		Cells []Cell `json:"cells"`
	}{req.MapID, cells}

	w.Header().Set("Content-Type", "application/json")
	json.NewEncoder(w).Encode(resp)
}

func setSpeedsHandler(w http.ResponseWriter, r *http.Request) {
	if r.Method != http.MethodPost {
		http.Error(w, "–ú–µ—Ç–æ–¥ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è", http.StatusMethodNotAllowed)
		return
	}

	var req SetSpeedsRequest
	if err := json.NewDecoder(r.Body).Decode(&req); err != nil {
		http.Error(w, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π JSON: "+err.Error(), http.StatusBadRequest)
		return
	}

	if err := validateSpeeds(req.Speeds); err != nil {
		http.Error(w, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ —Å–∫–æ—Ä–æ—Å—Ç–∏: "+err.Error(), http.StatusBadRequest)
		return
	}

	var exists int
	err := db.QueryRow("SELECT COUNT(*) FROM maps WHERE id = ?", req.MapID).Scan(&exists)
	if err != nil || exists == 0 {
		http.Error(w, "–ö–∞—Ä—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", http.StatusNotFound)
		return
	}

	speedBytes, _ := json.Marshal(req.Speeds)
	_, err = db.Exec("UPDATE maps SET speeds = ? WHERE id = ?", string(speedBytes), req.MapID)
	if err != nil {
		log.Printf("‚ùå –û—à–∏–±–∫–∞ SQL –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å–∫–æ—Ä–æ—Å—Ç–µ–π: %v", err)
		http.Error(w, "–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–∫–æ—Ä–æ—Å—Ç–µ–π: "+err.Error(), http.StatusInternalServerError)
		return
	}

	log.Printf("‚úÖ –°–∫–æ—Ä–æ—Å—Ç–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –¥–ª—è –∫–∞—Ä—Ç—ã %d", req.MapID)

	resp := struct {
		MapID   int       `json:"map_id"`
		Speeds  []float64 `json:"speeds"`
		Success bool      `json:"success"`
	}{req.MapID, req.Speeds, true}

	w.Header().Set("Content-Type", "application/json")
	json.NewEncoder(w).Encode(resp)
}

func newEpochHandler(w http.ResponseWriter, r *http.Request) {
	if r.Method != http.MethodPost {
		http.Error(w, "–ú–µ—Ç–æ–¥ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è", http.StatusMethodNotAllowed)
		return
	}

	var req NewEpochRequest
	if err := json.NewDecoder(r.Body).Decode(&req); err != nil {
		http.Error(w, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π JSON: "+err.Error(), http.StatusBadRequest)
		return
	}

	// –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–∞—Ä—Ç—ã —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π NULL –∑–Ω–∞—á–µ–Ω–∏–π
	var cfgStr, circlesStr, speedsStr sql.NullString
	var epoch sql.NullInt64
	err := db.QueryRow("SELECT config, circles, speeds, epoch FROM maps WHERE id = ?",
		req.MapID).Scan(&cfgStr, &circlesStr, &speedsStr, &epoch)
	if err != nil {
		if err == sql.ErrNoRows {
			http.Error(w, "–ö–∞—Ä—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", http.StatusNotFound)
		} else {
			log.Printf("‚ùå –û—à–∏–±–∫–∞ SQL: %v", err)
			http.Error(w, "–û—à–∏–±–∫–∞ –ë–î –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–∞—Ä—Ç—ã: "+err.Error(), http.StatusInternalServerError)
		}
		return
	}

	var cfg Config
	var circles []Circle
	var speeds []float64

	if err := json.Unmarshal([]byte(cfgStr.String), &cfg); err != nil {
		http.Error(w, "–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ config: "+err.Error(), http.StatusInternalServerError)
		return
	}
	if err := json.Unmarshal([]byte(circlesStr.String), &circles); err != nil {
		http.Error(w, "–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ circles: "+err.Error(), http.StatusInternalServerError)
		return
	}
	if speedsStr.Valid && speedsStr.String != "" && speedsStr.String != "[]" {
		if err := json.Unmarshal([]byte(speedsStr.String), &speeds); err != nil {
			http.Error(w, "–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ speeds: "+err.Error(), http.StatusInternalServerError)
			return
		}
	}

	// –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –∫–ª–µ—Ç–∫–∏ –∏–∑ –ë–î
	cells, err := loadCellsFromDB(req.MapID)
	if err != nil {
		log.Printf("‚ö†Ô∏è  –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–ª–µ—Ç–æ–∫: %v", err)
		http.Error(w, "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–ª–µ—Ç–æ–∫: "+err.Error(), http.StatusInternalServerError)
		return
	}

	// –ï—Å–ª–∏ –∫–ª–µ—Ç–æ–∫ –Ω–µ—Ç, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ
	if len(cells) == 0 {
		cells = generateDistribution(cfg, circles, []float64{90.0, 10.0})
		log.Printf("üìã –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –Ω–∞—á–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–ª—è –∫–∞—Ä—Ç—ã %d", req.MapID)
	}

	// –ü—Ä–∏–º–µ–Ω—è–µ–º –¥–≤–∏–∂–µ–Ω–∏–µ, –µ—Å–ª–∏ –µ—Å—Ç—å —Å–∫–æ—Ä–æ—Å—Ç–∏
	if len(speeds) > 0 {
		cells = moveNumbers(cfg, circles, cells, speeds)
		log.Printf("üéØ –ü—Ä–∏–º–µ–Ω–µ–Ω–æ –¥–≤–∏–∂–µ–Ω–∏–µ —á–∏—Å–µ–ª –¥–ª—è –∫–∞—Ä—Ç—ã %d", req.MapID)
	} else {
		log.Printf("‚ö†Ô∏è  –°–∫–æ—Ä–æ—Å—Ç–∏ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –¥–ª—è –∫–∞—Ä—Ç—ã %d, —á–∏—Å–ª–∞ –Ω–µ –¥–≤–∏–≥–∞—é—Ç—Å—è", req.MapID)
	}

	// –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —ç–ø–æ—Ö—É
	currentEpoch := int(epoch.Int64)
	currentEpoch++
	_, err = db.Exec("UPDATE maps SET epoch = ? WHERE id = ?", currentEpoch, req.MapID)
	if err != nil {
		log.Printf("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —ç–ø–æ—Ö–∏: %v", err)
		http.Error(w, "–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —ç–ø–æ—Ö–∏: "+err.Error(), http.StatusInternalServerError)
		return
	}

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–ª–µ—Ç–æ–∫
	if err := saveCellsToDB(req.MapID, cells); err != nil {
		log.Printf("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–ª–µ—Ç–æ–∫: %v", err)
		http.Error(w, "–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–ª–µ—Ç–æ–∫: "+err.Error(), http.StatusInternalServerError)
		return
	}

	resp := struct {
		MapID int    `json:"map_id"`
		Epoch int    `json:"epoch"`
		Cells []Cell `json:"cells"`
	}{req.MapID, currentEpoch, cells}

	w.Header().Set("Content-Type", "application/json")
	json.NewEncoder(w).Encode(resp)
}

func apiHandler(w http.ResponseWriter, r *http.Request) {
	// –î–æ–±–∞–≤–ª—è–µ–º CORS –∑–∞–≥–æ–ª–æ–≤–∫–∏
	w.Header().Set("Access-Control-Allow-Origin", "*")
	w.Header().Set("Access-Control-Allow-Methods", "POST, GET, OPTIONS")
	w.Header().Set("Access-Control-Allow-Headers", "Content-Type")

	if r.Method == "OPTIONS" {
		return
	}

	// –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å—ã
	log.Printf("üì° %s %s", r.Method, r.URL.Path)

	switch {
	case r.URL.Path == "/api/maps" && r.Method == http.MethodPost:
		createMapHandler(w, r)
	case r.URL.Path == "/api/distribute" && r.Method == http.MethodPost:
		distributeHandler(w, r)
	case r.URL.Path == "/api/speeds" && r.Method == http.MethodPost:
		setSpeedsHandler(w, r)
	case r.URL.Path == "/api/newEpoch" && r.Method == http.MethodPost:
		newEpochHandler(w, r)
	default:
		http.Error(w, "Endpoint –Ω–µ –Ω–∞–π–¥–µ–Ω", http.StatusNotFound)
	}
}

func main() {
	log.Println("üöÄ –ó–∞–ø—É—Å–∫ Circle-diagram —Å–µ—Ä–≤–µ—Ä–∞...")
	log.Println("üìä –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
	if err := initDB(); err != nil {
		log.Fatalf("‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î: %v", err)
	}
	defer db.Close()

	http.HandleFunc("/api/", apiHandler)

	log.Println("‚úÖ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É :8080")
	log.Println("üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ endpoints:")
	log.Println("   POST /api/maps - —Å–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ä—Ç—ã")
	log.Println("   POST /api/distribute - —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —á–∏—Å–µ–ª")
	log.Println("   POST /api/speeds - —É—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∫–æ—Ä–æ—Å—Ç–µ–π")
	log.Println("   POST /api/newEpoch - –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —ç–ø–æ—Ö–∏")
	log.Println("üéÆ –ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")

	log.Fatal(http.ListenAndServe(":8080", nil))
}
